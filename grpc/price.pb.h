// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: price.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_price_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_price_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_price_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_price_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_price_2eproto;
namespace price {
class PriceReply;
class PriceReplyDefaultTypeInternal;
extern PriceReplyDefaultTypeInternal _PriceReply_default_instance_;
class PriceRequest;
class PriceRequestDefaultTypeInternal;
extern PriceRequestDefaultTypeInternal _PriceRequest_default_instance_;
}  // namespace price
PROTOBUF_NAMESPACE_OPEN
template<> ::price::PriceReply* Arena::CreateMaybeMessage<::price::PriceReply>(Arena*);
template<> ::price::PriceRequest* Arena::CreateMaybeMessage<::price::PriceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace price {

// ===================================================================

class PriceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:price.PriceRequest) */ {
 public:
  PriceRequest();
  virtual ~PriceRequest();

  PriceRequest(const PriceRequest& from);
  PriceRequest(PriceRequest&& from) noexcept
    : PriceRequest() {
    *this = ::std::move(from);
  }

  inline PriceRequest& operator=(const PriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceRequest& operator=(PriceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceRequest* internal_default_instance() {
    return reinterpret_cast<const PriceRequest*>(
               &_PriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PriceRequest& a, PriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceRequest* New() const final {
    return CreateMaybeMessage<PriceRequest>(nullptr);
  }

  PriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceRequest& from);
  void MergeFrom(const PriceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "price.PriceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_price_2eproto);
    return ::descriptor_table_price_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelCodeFieldNumber = 2,
    kColorFieldNumber = 3,
    kYearFieldNumber = 4,
  };
  // string modelCode = 2;
  void clear_modelcode();
  const std::string& modelcode() const;
  void set_modelcode(const std::string& value);
  void set_modelcode(std::string&& value);
  void set_modelcode(const char* value);
  void set_modelcode(const char* value, size_t size);
  std::string* mutable_modelcode();
  std::string* release_modelcode();
  void set_allocated_modelcode(std::string* modelcode);
  private:
  const std::string& _internal_modelcode() const;
  void _internal_set_modelcode(const std::string& value);
  std::string* _internal_mutable_modelcode();
  public:

  // string color = 3;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // int32 year = 4;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:price.PriceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_price_2eproto;
};
// -------------------------------------------------------------------

class PriceReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:price.PriceReply) */ {
 public:
  PriceReply();
  virtual ~PriceReply();

  PriceReply(const PriceReply& from);
  PriceReply(PriceReply&& from) noexcept
    : PriceReply() {
    *this = ::std::move(from);
  }

  inline PriceReply& operator=(const PriceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceReply& operator=(PriceReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceReply* internal_default_instance() {
    return reinterpret_cast<const PriceReply*>(
               &_PriceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PriceReply& a, PriceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceReply* New() const final {
    return CreateMaybeMessage<PriceReply>(nullptr);
  }

  PriceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceReply& from);
  void MergeFrom(const PriceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "price.PriceReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_price_2eproto);
    return ::descriptor_table_price_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 2,
    kPriceFieldNumber = 1,
  };
  // string currencyCode = 2;
  void clear_currencycode();
  const std::string& currencycode() const;
  void set_currencycode(const std::string& value);
  void set_currencycode(std::string&& value);
  void set_currencycode(const char* value);
  void set_currencycode(const char* value, size_t size);
  std::string* mutable_currencycode();
  std::string* release_currencycode();
  void set_allocated_currencycode(std::string* currencycode);
  private:
  const std::string& _internal_currencycode() const;
  void _internal_set_currencycode(const std::string& value);
  std::string* _internal_mutable_currencycode();
  public:

  // int32 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:price.PriceReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currencycode_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_price_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PriceRequest

// string modelCode = 2;
inline void PriceRequest::clear_modelcode() {
  modelcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PriceRequest::modelcode() const {
  // @@protoc_insertion_point(field_get:price.PriceRequest.modelCode)
  return _internal_modelcode();
}
inline void PriceRequest::set_modelcode(const std::string& value) {
  _internal_set_modelcode(value);
  // @@protoc_insertion_point(field_set:price.PriceRequest.modelCode)
}
inline std::string* PriceRequest::mutable_modelcode() {
  // @@protoc_insertion_point(field_mutable:price.PriceRequest.modelCode)
  return _internal_mutable_modelcode();
}
inline const std::string& PriceRequest::_internal_modelcode() const {
  return modelcode_.GetNoArena();
}
inline void PriceRequest::_internal_set_modelcode(const std::string& value) {
  
  modelcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PriceRequest::set_modelcode(std::string&& value) {
  
  modelcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:price.PriceRequest.modelCode)
}
inline void PriceRequest::set_modelcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modelcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:price.PriceRequest.modelCode)
}
inline void PriceRequest::set_modelcode(const char* value, size_t size) {
  
  modelcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:price.PriceRequest.modelCode)
}
inline std::string* PriceRequest::_internal_mutable_modelcode() {
  
  return modelcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PriceRequest::release_modelcode() {
  // @@protoc_insertion_point(field_release:price.PriceRequest.modelCode)
  
  return modelcode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PriceRequest::set_allocated_modelcode(std::string* modelcode) {
  if (modelcode != nullptr) {
    
  } else {
    
  }
  modelcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelcode);
  // @@protoc_insertion_point(field_set_allocated:price.PriceRequest.modelCode)
}

// string color = 3;
inline void PriceRequest::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PriceRequest::color() const {
  // @@protoc_insertion_point(field_get:price.PriceRequest.color)
  return _internal_color();
}
inline void PriceRequest::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:price.PriceRequest.color)
}
inline std::string* PriceRequest::mutable_color() {
  // @@protoc_insertion_point(field_mutable:price.PriceRequest.color)
  return _internal_mutable_color();
}
inline const std::string& PriceRequest::_internal_color() const {
  return color_.GetNoArena();
}
inline void PriceRequest::_internal_set_color(const std::string& value) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PriceRequest::set_color(std::string&& value) {
  
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:price.PriceRequest.color)
}
inline void PriceRequest::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:price.PriceRequest.color)
}
inline void PriceRequest::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:price.PriceRequest.color)
}
inline std::string* PriceRequest::_internal_mutable_color() {
  
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PriceRequest::release_color() {
  // @@protoc_insertion_point(field_release:price.PriceRequest.color)
  
  return color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PriceRequest::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:price.PriceRequest.color)
}

// int32 year = 4;
inline void PriceRequest::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceRequest::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceRequest::year() const {
  // @@protoc_insertion_point(field_get:price.PriceRequest.year)
  return _internal_year();
}
inline void PriceRequest::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
}
inline void PriceRequest::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:price.PriceRequest.year)
}

// -------------------------------------------------------------------

// PriceReply

// int32 price = 1;
inline void PriceReply::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceReply::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriceReply::price() const {
  // @@protoc_insertion_point(field_get:price.PriceReply.price)
  return _internal_price();
}
inline void PriceReply::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void PriceReply::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:price.PriceReply.price)
}

// string currencyCode = 2;
inline void PriceReply::clear_currencycode() {
  currencycode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PriceReply::currencycode() const {
  // @@protoc_insertion_point(field_get:price.PriceReply.currencyCode)
  return _internal_currencycode();
}
inline void PriceReply::set_currencycode(const std::string& value) {
  _internal_set_currencycode(value);
  // @@protoc_insertion_point(field_set:price.PriceReply.currencyCode)
}
inline std::string* PriceReply::mutable_currencycode() {
  // @@protoc_insertion_point(field_mutable:price.PriceReply.currencyCode)
  return _internal_mutable_currencycode();
}
inline const std::string& PriceReply::_internal_currencycode() const {
  return currencycode_.GetNoArena();
}
inline void PriceReply::_internal_set_currencycode(const std::string& value) {
  
  currencycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PriceReply::set_currencycode(std::string&& value) {
  
  currencycode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:price.PriceReply.currencyCode)
}
inline void PriceReply::set_currencycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currencycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:price.PriceReply.currencyCode)
}
inline void PriceReply::set_currencycode(const char* value, size_t size) {
  
  currencycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:price.PriceReply.currencyCode)
}
inline std::string* PriceReply::_internal_mutable_currencycode() {
  
  return currencycode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PriceReply::release_currencycode() {
  // @@protoc_insertion_point(field_release:price.PriceReply.currencyCode)
  
  return currencycode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PriceReply::set_allocated_currencycode(std::string* currencycode) {
  if (currencycode != nullptr) {
    
  } else {
    
  }
  currencycode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currencycode);
  // @@protoc_insertion_point(field_set_allocated:price.PriceReply.currencyCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace price

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_price_2eproto
